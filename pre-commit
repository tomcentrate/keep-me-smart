# This script verifies if a list of "undesired" words are presented in the files you are intended to commit such console 
# output, debugging information or keys/tokens/passwords

# Based on the git hook created by Mark Story

# http://mark-story.com/posts/view/using-git-commit-hooks-to-prevent-stupid-mistakes

# Instructions:

# Put this file into your .git/hooks folder and set as executable (chmod +x pre-commit)

# If you want to skip the hook just add the --no-verify: git commit --no-verify

# ---------------------------------------------

#!/bin/sh

# Modify this
# LIST='list\|of\|words\|splitted\|by\|slash\|and\|pipe'
LIST="puts\|debugger\|byebug\|binding.pry\|alert(\|console.log(\|var_dump("
ERROR=0
if git rev-parse --verify HEAD >/dev/null 2>&1; then
    against=HEAD
else
    against=4b825dc642cb6eb9a060e54bf8d69288fbee4904
fi

for FILE in `git diff-index --name-status --cached $against -- | cut -c3-` ; do
    # Check if the file contains one of the words in LIST
    if grep -q -w $LIST $FILE; then
      echo $FILE "- has debugging information"
      grep -n -w $LIST $FILE
      ERROR=1
    fi
done
if [ "$ERROR" -eq 1 ]; then
  echo "\nIf you still want to keep this, pass --no-verify to your commit statement"
fi
exit $ERROR
